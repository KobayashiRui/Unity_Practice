using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using MLAgents;

public class PlateRobotAgent : Agent {

    public GameObject body1;
    public GameObject body2;

    HingeJoint jointbody1;
    HingeJoint jointbody2;

//float currentPoslist = new List<float>(){0.0f,0.0f};
    //float[] currentPoslist = new float[]{0.0f, 0.0f};
    public float currentposbody1;
    public float currentposbody2;

    float targetPositionjointbody1;//body1の角度の目的角度
    float targetPositionjointbody2;//body2の角度の目的角度

    float beforeTime;

    bool isNewDecisionStep;
    int currentDecisionStep;
    int flag;
    int step;


    public override void InitializeAgent()
    {
        jointbody1 = body1.GetComponent<HingeJoint>();
        jointbody2 = body2.GetComponent<HingeJoint>();
        targetPositionjointbody1 = 0.0f;
        targetPositionjointbody2 = 0.0f;
        currentposbody1 = 0.0f;
        currentposbody2 = 0.0f;
        beforeTime = Time.time;
        flag = 0;
        step = 0;
    }

    //状態を取得する(Stateの取得時に呼ばれる)
    public override void CollectObservations()
    {
        AddVectorObs(1);
        
    }

    //ステップ時に呼ばれる
    public override void AgentAction(float[] vectorAction, string textAction)
	{
        bool position_flag = false;

        float diffPosition = (Time.time-beforeTime) * 100.0f; //dt * dw という感じ

        if(flag == 0){
        targetPositionjointbody1 = vectorAction[0];
        targetPositionjointbody2 = vectorAction[1];
        flag = 1;
        step = 0;
        }
        beforeTime = Time.time;
        if(Mathf.Abs((targetPositionjointbody1*180.0f)  - currentposbody1) < diffPosition){
            this.currentposbody1 = targetPositionjointbody1 * 180.0f;
        }else{
        //Debug.Log("id");
        //Debug.Log(i);
        //Debug.Log("targetpos");
        //Debug.Log(targetPos);
            if(targetPositionjointbody1*180.0f < currentposbody1){
                this.currentposbody1 -= diffPosition; 
            }else{
                this.currentposbody1 += diffPosition;
            }
        }

        if(Mathf.Abs((targetPositionjointbody2*180.0f) - currentposbody2) < diffPosition){
            this.currentposbody2 = targetPositionjointbody2 * 180.0f;
        }else{
        //Debug.Log("id");
        //Debug.Log(i);
            if(targetPositionjointbody2*180.0f < currentposbody2){
                this.currentposbody2 -= diffPosition; 
            }else{
                this.currentposbody2 += diffPosition;
            }
        }
        step +=1;
        if(step >= 50){
            flag = 0;
        }
        MoveJoint();

        AddReward(1);//報酬を追加
    }

    public void SetHinge(float targetPos,int i){
        //Debug.Log("targetpos");
        //Debug.Log(targetPos);
        if(i == 0){
        }else if(i == 1){
        Debug.Log("id");
        Debug.Log(i);
        }
    }

    public void MoveJoint(){

        JointSpring hingeSpring2 = jointbody2.spring;
        hingeSpring2.targetPosition = currentposbody2;
        jointbody2.spring = hingeSpring2;

        JointSpring hingeSpring1 = jointbody1.spring;
        hingeSpring1.targetPosition = currentposbody1;//currentPoslist[0];
        jointbody1.spring = hingeSpring1;
    }


    //リセット時に呼ばれる
    public override void AgentReset()
    {
    }
}
